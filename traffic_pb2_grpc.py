# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import traffic_pb2 as traffic__pb2


class TrafficServerStub(object):
    """The greeting service definition.
    Sends a greeting
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendState = channel.unary_unary(
                '/trafficcontrol.TrafficServer/SendState',
                request_serializer=traffic__pb2.StateRequest.SerializeToString,
                response_deserializer=traffic__pb2.StateReply.FromString,
                )
        self.HeartBeat = channel.unary_unary(
                '/trafficcontrol.TrafficServer/HeartBeat',
                request_serializer=traffic__pb2.RefreshRequest.SerializeToString,
                response_deserializer=traffic__pb2.RefreshReply.FromString,
                )
        self.TransmitData = channel.unary_unary(
                '/trafficcontrol.TrafficServer/TransmitData',
                request_serializer=traffic__pb2.DataTransmission.SerializeToString,
                response_deserializer=traffic__pb2.DataReply.FromString,
                )


class TrafficServerServicer(object):
    """The greeting service definition.
    Sends a greeting
    """

    def SendState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransmitData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrafficServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendState': grpc.unary_unary_rpc_method_handler(
                    servicer.SendState,
                    request_deserializer=traffic__pb2.StateRequest.FromString,
                    response_serializer=traffic__pb2.StateReply.SerializeToString,
            ),
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=traffic__pb2.RefreshRequest.FromString,
                    response_serializer=traffic__pb2.RefreshReply.SerializeToString,
            ),
            'TransmitData': grpc.unary_unary_rpc_method_handler(
                    servicer.TransmitData,
                    request_deserializer=traffic__pb2.DataTransmission.FromString,
                    response_serializer=traffic__pb2.DataReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trafficcontrol.TrafficServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrafficServer(object):
    """The greeting service definition.
    Sends a greeting
    """

    @staticmethod
    def SendState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficcontrol.TrafficServer/SendState',
            traffic__pb2.StateRequest.SerializeToString,
            traffic__pb2.StateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficcontrol.TrafficServer/HeartBeat',
            traffic__pb2.RefreshRequest.SerializeToString,
            traffic__pb2.RefreshReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransmitData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficcontrol.TrafficServer/TransmitData',
            traffic__pb2.DataTransmission.SerializeToString,
            traffic__pb2.DataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
